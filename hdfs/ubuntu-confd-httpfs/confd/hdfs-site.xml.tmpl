<?xml version="1.0"?>
<configuration>
  <property>
    <name>dfs.nameservices</name>
    <value>{{getenv "HDPClusterName"}}</value>
  </property>
  <property>
    <name>dfs.ha.namenodes.{{getenv "HDPClusterName"}}</name>
    <value>{{getenv "PNode_SERVICE_HostName"}},{{getenv "SNode_SERVICE_HostName"}}</value>
  </property>

  <property>
    <name>dfs.namenode.rpc-address.{{getenv "HDPClusterName"}}.{{getenv "PNode_SERVICE_HostName"}}</name>
    <value>{{ $pn_link := split (getenv "PNode_SERVICE") "/" }}{{$pn_stack := index $pn_link 0}}{{ $pn_service := index $pn_link 1}}{{range $i, $e := ls (printf "/stacks/%s/services/%s/containers" $pn_stack $pn_service)}}{{if $i}},{{end}}{{getv (printf "/stacks/%s/services/%s/containers/%s/primary_ip" $pn_stack $pn_service $e)}}:8020{{end}}</value>
  </property>
  <property>
    <name>dfs.namenode.rpc-address.{{getenv "HDPClusterName"}}.{{getenv "SNode_SERVICE_HostName"}}</name>
    <value>{{ $sn_link := split (getenv "SNode_SERVICE") "/" }}{{$sn_stack := index $sn_link 0}}{{ $sn_service := index $sn_link 1}}{{range $i, $e := ls (printf "/stacks/%s/services/%s/containers" $sn_stack $sn_service)}}{{if $i}},{{end}}{{getv (printf "/stacks/%s/services/%s/containers/%s/primary_ip" $sn_stack $sn_service $e)}}:8020{{end}}</value>
  </property>
  <property>
    <name>dfs.namenode.servicerpc-address.{{getenv "HDPClusterName"}}.{{getenv "PNode_SERVICE_HostName"}}</name>
    <value>{{ $pn_link := split (getenv "PNode_SERVICE") "/" }}{{$pn_stack := index $pn_link 0}}{{ $pn_service := index $pn_link 1}}{{range $i, $e := ls (printf "/stacks/%s/services/%s/containers" $pn_stack $pn_service)}}{{if $i}},{{end}}{{getv (printf "/stacks/%s/services/%s/containers/%s/primary_ip" $pn_stack $pn_service $e)}}:8022{{end}}</value>
  </property>
  <property>
    <name>dfs.namenode.servicerpc-address.{{getenv "HDPClusterName"}}.{{getenv "SNode_SERVICE_HostName"}}</name>
    <value>{{ $sn_link := split (getenv "SNode_SERVICE") "/" }}{{$sn_stack := index $sn_link 0}}{{ $sn_service := index $sn_link 1}}{{range $i, $e := ls (printf "/stacks/%s/services/%s/containers" $sn_stack $sn_service)}}{{if $i}},{{end}}{{getv (printf "/stacks/%s/services/%s/containers/%s/primary_ip" $sn_stack $sn_service $e)}}:8022{{end}}</value>
  </property>
  <property>
    <name>dfs.namenode.http-address.{{getenv "HDPClusterName"}}.{{getenv "PNode_SERVICE_HostName"}}</name>
    <value>{{ $pn_link := split (getenv "PNode_SERVICE") "/" }}{{$pn_stack := index $pn_link 0}}{{ $pn_service := index $pn_link 1}}{{range $i, $e := ls (printf "/stacks/%s/services/%s/containers" $pn_stack $pn_service)}}{{if $i}},{{end}}{{getv (printf "/stacks/%s/services/%s/containers/%s/primary_ip" $pn_stack $pn_service $e)}}:50070{{end}}</value>
  </property>
  <property>
    <name>dfs.namenode.http-address.{{getenv "HDPClusterName"}}.{{getenv "SNode_SERVICE_HostName"}}</name>
    <value>{{ $sn_link := split (getenv "SNode_SERVICE") "/" }}{{$sn_stack := index $sn_link 0}}{{ $sn_service := index $sn_link 1}}{{range $i, $e := ls (printf "/stacks/%s/services/%s/containers" $sn_stack $sn_service)}}{{if $i}},{{end}}{{getv (printf "/stacks/%s/services/%s/containers/%s/primary_ip" $sn_stack $sn_service $e)}}:50070{{end}}</value>
  </property>
  <property>
    <name>dfs.namenode.name.dir</name>
    <value>file://{{getenv "HADOOP_HDFS_NAMENODE"}}</value>
    <description>Path on the local filesystem where the NameNode stores the namespace and transaction logs persistently.</description>
  </property>

  <!-- Journal Nodes -->
  <property>
    <name>dfs.namenode.shared.edits.dir</name>
    <value>qjournal://{{ $jn_link := split (getenv "JNode_SERVICE") "/" }}{{$jn_stack := index $jn_link 0}}{{ $jn_service := index $jn_link 1}}{{range $i, $e := ls (printf "/stacks/%s/services/%s/containers" $jn_stack $jn_service)}}{{if $i}},{{end}}{{getv (printf "/stacks/%s/services/%s/containers/%s/primary_ip" $jn_stack $jn_service $e)}}{{end}}/{{getenv "HDPClusterName"}}</value>
  </property>
  <property>
    <name>dfs.journalnode.edits.dir</name>
    <value>{{getenv "HADOOP_HDFS_JOURNALNODE"}}</value>
  </property>
  <!-- Journal Nodes -->

  <!-- Data Nodes -->
  <property>
    <name>dfs.datanode.data.dir</name>
    <value>file://{{getenv "HADOOP_HDFS_DATANODE"}}</value>
    <description>Comma separated list of paths on the local filesystem of a DataNode where it should store its blocks.</description>
  </property>
  <!-- Data Nodes -->

  <!-- Zookeeper failover -->
  <property>
    <name>dfs.ha.automatic-failover.enabled</name>
    <value>true</value>
  </property>
  <!-- Zookeeper failover -->

  <!-- Manual Failover -->
  <property>
    <name>dfs.client.failover.proxy.provider.{{getenv "HDPClusterName"}}</name>
    <value>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider</value>
  </property>
  <property>
    <name>dfs.ha.fencing.methods</name>
    <value>shell(/bin/true)</value>
  </property>
  <!-- Manual Failover -->

  <property>
    <name>dfs.namenode.replication.min</name>
    <value>1</value>
    <final>true</final>
  </property>
  <property>
    <name>dfs.replication.max</name>
    <value>10</value>
    <final>true</final>
  </property>

  <property>
    <name>mapreduce.client.submit.file.replication</name>
    <value>3</value>
    <final>true</final>
  </property>

  <property>
    <name>dfs.webhdfs.enabled</name>
    <value>true</value>
  </property>

<!-- Block location tracking -->
  <property>
    <name>dfs.datanode.hdfs-blocks-metadata.enabled</name>
    <value>true</value>
  </property>
<!-- Block location tracking -->
<!-- Enable dynamic created containers to register as datanodes -->
    <property>
      <name>dfs.namenode.datanode.registration.ip-hostname-check</name>
      <value>false</value>
    </property>
<!-- Enable dynamic created containers to register as datanodes -->

</configuration>                                                                                   
